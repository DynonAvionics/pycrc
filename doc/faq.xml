<?xml version='1.0'?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
                    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY date               "2007-01-11">
<!ENTITY bit_by_bit         "bit_by_bit">
<!ENTITY bit_by_bit_fast    "bit_by_bit_fast">
<!ENTITY table_driven       "table_driven">
]>

<article>
    <articleinfo>
        <title>pycrc FAQ</title>
        <author>
            <firstname>Thomas</firstname>
            <surname>Pircher</surname>
        </author>
        <pubdate>&date;</pubdate>
        <!--
        <revhistory>
            <revision>
                <revnumber>0.1</revnumber>
                <date>2007-01-14</date>
                <revremark>First draft for review.</revremark>
            </revision>
        </revhistory>
        -->
    </articleinfo>

    <sect1 id="general-questions"><title>General questions</title>
        <sect2 id="why"><title>Why yet another CRC tool?</title>
            <para>
                Because I couldn't find any program which met my needs. I wanted an Open Source program with
                <itemizedlist>
                    <listitem>
                        <para>
                        an easy to read, fully parametrisable reference implementation in some scripting language
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                        a clean C source code generator which output could be easily included in embedded programs
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </sect2>
    </sect1>

    <sect1 id="pycrc"><title>pycrc</title>
        <sect2 id="inefficient"><title>But the Python implementation is extremely inefficient!</title>
            <para>
            Good observation! And I'm not going to change this. The Python implementation is thought to provide a correct, stable and easy
            to read code bases for further experiments.
            The right place to do performance tuning is the generated C code. I'm happy to consider every suggestion to improve the generated code.
            </para>
        </sect2>

        <sect2 id="best-model"><title>Which is the best model?</title>
            <para>
            This depends. For occasional computations on small amounts of data the optimized bit-by-bit implementation might 
            be a feasable solution and might also have a speed which is comparable to other models.
            On desktop computers, with larger amounts of data, the table driven model is a good choice, but on embedded platforms,
            where code space is a  major concern, a optimized bit_by_bit implementation might be the better choice.

            <informaltable frame='none'>
            <tgroup cols='5' align='left' colsep='3' rowsep='3'>
                <thead>
                    <row>
                        <entry>Parameters</entry>
                        <entry>Width</entry>
                        <entry>Platform</entry>
                        <entry>Data quantity</entry>
                        <entry>Possible algorithms</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Variable, Fixed</entry>
                        <entry>1-16 bits</entry>
                        <entry>Embedded, Desktop</entry>
                        <entry>Low</entry>
                        <entry>&bit_by_bit;, &bit_by_bit_fast;</entry>
                    </row>
                    <row>
                        <entry>Fixed</entry>
                        <entry>8, 16 bits</entry>
                        <entry>Embedded, Desktop</entry>
                        <entry>Medium, Low</entry>
                        <entry>&bit_by_bit_fast;, &table_driven; (table index width: 4)</entry>
                    </row>
                    <row>
                        <entry>Fixed</entry>
                        <entry>8 or more bits</entry>
                        <entry>Desktop</entry>
                        <entry>Medium, High</entry>
                        <entry>&table_driven;</entry>
                    </row>
                </tbody>
            </tgroup>
            </informaltable>
            </para>
        </sect2>

        <sect2 id="code-ownership"><title>Who owns the generated code?</title>
            <para>
            You. I have added a special exception to the copyright statement which permits the use of pycrc#s output in larger works and to distribute
            that code under terms of your choice.
            </para>
            <para>
            If you decide to include pycrc's output in your work, I would appreciate a short mention od it in your sorce code or documentation.
            </para>
        </sect2>
    </sect1>
</article>


